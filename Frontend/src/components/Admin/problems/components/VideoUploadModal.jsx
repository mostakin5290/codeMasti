import React, { useState } from 'react';
import axiosClient from '../../../../api/axiosClient';
import { toast } from 'react-toastify';
import { FaUpload, FaSpinner, FaTimes, FaCheckCircle, FaExclamationCircle } from 'react-icons/fa';
import { MdOutlineVideocam } from 'react-icons/md'; // New icon
import { useTheme } from '../../../../context/ThemeContext';

const defaultAppTheme = { /* ... (same as in ProblemList.jsx) ... */
    background: 'bg-gray-900', text: 'text-white', primary: 'bg-cyan-500',
    primaryHover: 'bg-cyan-600', secondary: 'bg-blue-600', secondaryHover: 'bg-blue-700',
    cardBg: 'bg-gray-800', cardText: 'text-gray-300', border: 'border-gray-700',
    buttonText: 'text-white', highlight: 'text-cyan-400', highlightSecondary: 'text-blue-400',
    highlightTertiary: 'text-purple-400', iconBg: 'bg-cyan-500/10',
    gradientFrom: 'from-gray-900', gradientTo: 'to-gray-800',
    successColor: 'text-emerald-400',
    warningColor: 'text-amber-400',
    errorColor: 'text-red-400',
    infoColor: 'text-blue-400',
};

const VideoUploadModal = ({ isOpen, onClose, problemId, onVideoUploaded, appTheme }) => {
    const theme = { ...defaultAppTheme, ...appTheme };

    const [selectedFile, setSelectedFile] = useState(null);
    const [isUploading, setIsUploading] = useState(false);
    const [uploadProgress, setUploadProgress] = useState(0);
    const [uploadStatus, setUploadStatus] = useState(''); // 'pending', 'uploading', 'saving', 'success', 'error'
    const [uploadError, setUploadError] = useState('');

    if (!isOpen) return null;

    const handleFileChange = (event) => {
        const file = event.target.files[0];
        if (file && file.type.startsWith('video/')) {
            setSelectedFile(file);
            setUploadError('');
            setUploadProgress(0);
            setUploadStatus('');
        } else {
            setSelectedFile(null);
            setUploadError('Please select a valid video file.');
        }
    };

    const handleUpload = async () => {
        if (!selectedFile) {
            setUploadError('No video file selected.');
            return;
        }

        setIsUploading(true);
        setUploadStatus('pending');
        setUploadError('');

        try {
            // 1. Get Cloudinary upload signature from backend
            setUploadStatus('Getting upload credentials...');
            const { data: signatureData } = await axiosClient.get(`/video/create/${problemId}`);
            const { signature, timestamp, public_id, api_key, cloud_name, upload_url } = signatureData;

            // 2. Prepare FormData for direct upload to Cloudinary
            const formData = new FormData();
            formData.append('file', selectedFile);
            formData.append('api_key', api_key);
            formData.append('timestamp', timestamp);
            formData.append('signature', signature);
            formData.append('public_id', public_id);
            formData.append('resource_type', 'video'); // Explicitly set resource type

            // 3. Upload video to Cloudinary
            setUploadStatus('Uploading video to Cloudinary...');
            const cloudinaryResponse = await axiosClient.post(upload_url, formData, {
                headers: { 'Content-Type': 'multipart/form-data' },
                onUploadProgress: (progressEvent) => {
                    setUploadProgress(Math.round((progressEvent.loaded * 100) / progressEvent.total));
                },
                withCredentials: false
            });
            if (cloudinaryResponse.data.secure_url) {
                // 4. Save video metadata to your backend
                setUploadStatus('Saving video metadata...');
                const { data: savedVideoData } = await axiosClient.post('/video/save', {
                    problemId: problemId,
                    cloudinaryPublicId: cloudinaryResponse.data.public_id,
                    secureUrl: cloudinaryResponse.data.secure_url,
                    duration: cloudinaryResponse.data.duration, // Cloudinary provides duration
                    // thumbnailUrl is generated by backend
                });

                setUploadStatus('success');
                toast.success('Video uploaded and saved successfully!');
                onVideoUploaded({
                    problemId: problemId,
                    _id: savedVideoData.videoSolution.id, // The _id of the SolutionVideo document
                    cloudinaryPublicId: cloudinaryResponse.data.public_id,
                    secureUrl: cloudinaryResponse.data.secure_url,
                    thumbnailUrl: savedVideoData.videoSolution.thumbnailUrl,
                    duration: savedVideoData.videoSolution.duration
                });
                onClose(); // Close modal on success

            } else {
                throw new Error('Cloudinary upload failed: No secure URL returned.');
            }

        } catch (error) {
            console.error('Video upload failed:', error.response?.data || error);
            setUploadStatus('error');
            setUploadError(error.response?.data?.error || error.message || 'An unknown error occurred during upload.');
            toast.error(error.response?.data?.error || 'Video upload failed!');
        } finally {
            setIsUploading(false);
            setUploadProgress(0); // Reset progress on completion/error
        }
    };

    const getPrimaryButtonClasses = () =>
        `bg-gradient-to-r ${theme.primary.replace('bg-', 'from-')} ${theme.secondary.replace('bg-', 'to-')} hover:${theme.primaryHover.replace('bg-', 'from-')} hover:${theme.secondaryHover.replace('bg-', 'to-')} ${theme.buttonText}`;
    const getOutlineButtonClasses = () =>
        `border ${theme.border}/50 ${theme.cardText} hover:${theme.cardBg}/50 hover:${theme.text}`;

    return (
        <div className={`fixed inset-0 z-50 flex items-center justify-center p-4 ${theme.background}/70 backdrop-blur-sm`}>
            <div className={`relative ${theme.cardBg} rounded-xl shadow-2xl border ${theme.border}/40 p-6 w-full max-w-lg space-y-6`}>
                {/* Close Button */}
                <button
                    onClick={onClose}
                    className={`absolute top-4 right-4 p-2 rounded-full ${theme.background}/50 ${theme.cardText} hover:${theme.errorColor} transition-colors`}
                    disabled={isUploading}
                >
                    <FaTimes />
                </button>

                {/* Header */}
                <div className="text-center space-y-2">
                    <MdOutlineVideocam className={`mx-auto text-5xl ${theme.highlight}`} />
                    <h2 className={`text-2xl font-bold ${theme.text}`}>Upload Solution Video</h2>
                    <p className={`${theme.cardText} text-sm`}>For Problem ID: {problemId}</p>
                </div>

                {/* File Input */}
                <div className="space-y-3">
                    <label className={`block text-sm font-medium ${theme.cardText}`}>
                        Select Video File:
                    </label>
                    <input
                        type="file"
                        accept="video/*"
                        onChange={handleFileChange}
                        className={`w-full text-sm ${theme.cardText} file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:${getPrimaryButtonClasses()} file:cursor-pointer file:transition-all file:duration-300 file:hover:opacity-80
                        ${isUploading ? 'cursor-not-allowed' : ''}`}
                        disabled={isUploading}
                    />
                    {selectedFile && (
                        <p className={`text-xs ${theme.cardText}`}>Selected: {selectedFile.name} ({(selectedFile.size / (1024 * 1024)).toFixed(2)} MB)</p>
                    )}
                </div>

                {/* Upload Status */}
                {isUploading && (
                    <div className="space-y-2">
                        <div className="flex justify-between text-sm font-medium">
                            <span className={`${theme.cardText}`}>{uploadStatus}</span>
                            <span className={`${theme.text}`}>{uploadProgress}%</span>
                        </div>
                        <div className={`w-full ${theme.background}/50 rounded-full h-2.5`}>
                            <div
                                className={`h-2.5 rounded-full ${theme.primary}`}
                                style={{ width: `${uploadProgress}%` }}
                            ></div>
                        </div>
                    </div>
                )}

                {/* Error Message */}
                {uploadError && (
                    <div className={`flex items-center gap-2 p-3 ${theme.errorColor.replace('text-', 'bg-')}/10 border border-${theme.errorColor.split('-')[1]}-500/30 rounded-lg text-sm ${theme.errorColor}`}>
                        <FaExclamationCircle />
                        <span>{uploadError}</span>
                    </div>
                )}

                {/* Actions */}
                <div className="flex justify-end gap-3">
                    <button
                        onClick={handleUpload}
                        disabled={!selectedFile || isUploading}
                        className={`flex items-center gap-2 px-5 py-2.5 rounded-lg font-semibold transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${getPrimaryButtonClasses()}`}
                    >
                        {isUploading ? (
                            <>
                                <FaSpinner className="animate-spin" /> Uploading...
                            </>
                        ) : (
                            <>
                                <FaUpload /> Start Upload
                            </>
                        )}
                    </button>
                    <button
                        onClick={onClose}
                        disabled={isUploading}
                        className={`px-5 py-2.5 rounded-lg font-semibold transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${getOutlineButtonClasses()}`}
                    >
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    );
};

export default VideoUploadModal;